/**
 *  ST_AnyThing.groovy
 *
 *  Copyright 2014 Dan G Ogorchock & Daniel J Ogorchock
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Change History:
 *
 *    Date        Who            What
 *    ----        ---            ----
 *    2015-01-03  Dan & Daniel   Original Creation
 *    2015-01-10  Todd Whitehead Just a Bunch of Contacts
 *
 */
 
metadata {
	definition (name: "alarm", namespace: "toddtmw", author: "Daniel Ogorchock") {
		capability "Configuration"
        capability "Refresh"
		capability "Water Sensor"
		capability "Temperature Measurement"
		capability "Relative Humidity Measurement"
		capability "Contact Sensor"
		capability "Polling"
		capability "Sensor"
		attribute "Pin4", "string"
    		attribute "Pin5", "string"
      		attribute "Pin7", "string"
      		attribute "Pin8", "string"
      		attribute "Pin9", "string"
      		attribute "Pin10", "string"
      		attribute "Pin11", "string"
      		attribute "Pin12", "string"
	}

    simulator {
 
    }

	// Tile Definitions
	tiles {
		standardTile("Pin4", "device.Pin4", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin5", "device.Pin5", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin7", "device.Pin7", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin8", "device.Pin8", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin9", "device.Pin9", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin10", "device.Pin10", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin11", "device.Pin11", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}

		standardTile("Pin12", "device.Pin12", width: 1, height: 1) {
			state("open", label:'${name}', icon:"st.contact.contact.open", backgroundColor:"#ffa81e")
			state("closed", label:'${name}', icon:"st.contact.contact.closed", backgroundColor:"#79b821")
		}



        main(["Pin4","Pin5","Pin7","Pin8","Pin9","Pin10","Pin11","Pin12"])

//        main(["Pin4"])

        details(["Pin4","Pin5","Pin7","Pin8","Pin9","Pin10","Pin11","Pin12"])
	}
}

// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"
    def msg = zigbee.parse(description)?.text
    log.debug "Parse got '${msg}'"

    def parts = msg.split(" ")
    def name  = parts.length>0?parts[0].trim():null
    def value = parts.length>1?parts[1].trim():null

    name = value != "ping" ? name : null

    def result = createEvent(name: name, value: value)

    log.debug result

    return result
}


def poll() {
	//temporarily implement poll() to issue a configure() command to send the polling interval settings to the arduino
	configure()
}

