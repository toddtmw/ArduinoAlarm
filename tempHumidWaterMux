/**
 *  Virtual to Arduino Multiplexer
 *
 *  Copyright 2015 Todd Whitehead, Based on Code by Daniel Ogorchock
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "temphumidwater mux",
    namespace: "toddtmw",
    author: "Todd Whitehead",
    description: "Virtual to Arduino Multiplexer",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")
 
 
preferences {
	section("Select the Virtual Temperature/Humidity devices") {
		input "temphumid_1", title: "Virtual Sensor for Pin 16", "capability.temperatureMeasurement", required: false
		input "temphumid_2", title: "Virtual Sensor for Pin 17", "capability.temperatureMeasurement", required: false
		input "temphumid_3", title: "Virtual Sensor for Pin 18", "capability.temperatureMeasurement", required: false
		input "temphumid_4", title: "Virtual Sensor for Pin 19", "capability.temperatureMeasurement", required: false
		input "temphumid_5", title: "Virtual Sensor for Pin 53", "capability.temperatureMeasurement", required: false
	}

	section("Select the Virtual Water devices") {
		input "water_1", title: "Virtual Sensor for Pin A1", "capability.waterSensor", required: false

		input "water_2", title: "Virtual Sensor for Pin A2", "capability.waterSensor", required: false

		input "water_3", title: "Virtual Sensor for Pin A3", "capability.waterSensor", required: false

		input "water_4", title: "Virtual Sensor for Pin A4", "capability.waterSensor", required: false

	}

 
    section("Which Arduino board to control?") {
		input "arduino", "capability.contactSensor"
        //"device.ogiewonarduino" 
    }    
}
 
def installed() {
	log.debug "Installed with settings: ${settings}"
	subscribe()
}
 
def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	subscribe()
}
 
def subscribe() {
    subscribe(arduino, "PinA1.wet", water_1_wet)
    subscribe(arduino, "PinA1.dry", water_1_dry)
    subscribe(arduino, "PinA2.wet", water_2_wet)
    subscribe(arduino, "PinA2.dry", water_2_dry)
    subscribe(arduino, "PinA3.wet", water_3_wet)
    subscribe(arduino, "PinA3.dry", water_3_dry)
    subscribe(arduino, "PinA4.wet", water_4_wet)
    subscribe(arduino, "PinA4.dry", water_4_dry)
	subscribe(arduino, "Pin16t", temphumid_1_UpdateTemp)
   	subscribe(arduino, "Pin16h", temphumid_1_UpdateHumid)
	subscribe(arduino, "Pin17t", temphumid_2_UpdateTemp)
   	subscribe(arduino, "Pin17h", temphumid_2_UpdateHumid)
	subscribe(arduino, "Pin18t", temphumid_3_UpdateTemp)
   	subscribe(arduino, "Pin18h", temphumid_3_UpdateHumid)
	subscribe(arduino, "Pin19t", temphumid_4_UpdateTemp)
   	subscribe(arduino, "Pin19h", temphumid_4_UpdateHumid)
	subscribe(arduino, "Pin53t", temphumid_5_UpdateTemp)
   	subscribe(arduino, "Pin53h", temphumid_5_UpdateHumid)
}
  
def water_1_wet(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_1.wetme()
}
 
def water_1_dry(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_1.dryme()
} 


def water_2_wet(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_2.wetme()
}
 
def water_2_dry(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_2.dryme()
} 


def water_3_wet(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_3.wetme()
}
 
def water_3_dry(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_3.dryme()
} 


def water_4_wet(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_4.wetme()
}
 
def water_4_dry(evt)
{
    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    water_4.dryme()
} 


def temphumid_1_UpdateTemp(evt)
{
    log.debug "temperature: $evt.value, $evt"
    temphumid_1.updateTemperature(evt.value)
}

def temphumid_1_UpdateHumid(evt)
{
    log.debug "humidity: $evt.value, $evt"
    temphumid_1.updateHumidity(evt.value)
}

def temphumid_2_UpdateTemp(evt)
{
    log.debug "temperature: $evt.value, $evt"
    temphumid_2.updateTemperature(evt.value)
}

def temphumid_2_UpdateHumid(evt)
{
    log.debug "humidity: $evt.value, $evt"
    temphumid_2.updateHumidity(evt.value)
}

def temphumid_3_UpdateTemp(evt)
{
    log.debug "temperature: $evt.value, $evt"
    temphumid_3.updateTemperature(evt.value)
}

def temphumid_3_UpdateHumid(evt)
{
    log.debug "humidity: $evt.value, $evt"
    temphumid_3.updateHumidity(evt.value)
}

def temphumid_4_UpdateTemp(evt)
{
    log.debug "temperature: $evt.value, $evt"
    temphumid_4.updateTemperature(evt.value)
}

def temphumid_4_UpdateHumid(evt)
{
    log.debug "humidity: $evt.value, $evt"
    temphumid_4.updateHumidity(evt.value)
}

def temphumid_5_UpdateTemp(evt)
{
    log.debug "temperature: $evt.value, $evt"
    temphumid_5.updateTemperature(evt.value)
}

def temphumid_5_UpdateHumid(evt)
{
    log.debug "humidity: $evt.value, $evt"
    temphumid_5.updateHumidity(evt.value)
}

def initialize() {
	// TODO: subscribe to attributes, devices, locations, etc.
}
